const express = require("express");
const router = express.Router();
const sqlite3 = require("sqlite3").verbose();
const QRCode = require("qrcode");
const path = require("path");
const fs = require("fs");

const db = new sqlite3.Database("./data/menu.db");

// üìå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á `tables` ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
db.run(`CREATE TABLE IF NOT EXISTS tables (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  number INTEGER UNIQUE NOT NULL,
  status TEXT DEFAULT 'available'
)`);

const qrCodeFolder = path.resolve(__dirname, "../uploads/qr_codes");
if (!fs.existsSync(qrCodeFolder)) {
  fs.mkdirSync(qrCodeFolder, { recursive: true });
}

// üìå GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get("/", (req, res) => {
  db.all("SELECT * FROM tables", [], (err, rows) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json(rows);
  });
});
// üìå GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ï‡πä‡∏∞‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç
router.get("/:number", (req, res) => {
  const { number } = req.params;
  console.log(`üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏ï‡πä‡∏∞‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç: ${number}`);

  db.get("SELECT * FROM tables WHERE number = ?", [number], (err, row) => {
    if (err) {
      console.error("‚ùå Error:", err.message);
      return res.status(500).json({ error: err.message });
    }
    if (!row) {
      console.warn(`‚ö†Ô∏è ‡πÇ‡∏ï‡πä‡∏∞‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ${number} ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•`);
      return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ" });
    }

    console.log(`‚úÖ ‡∏û‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ${number}:`, row);
    res.json(row);
  });
});

// üìå POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞‡πÉ‡∏´‡∏°‡πà + ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
router.post("/", (req, res) => {
  const { number } = req.body;
  if (!number) return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞" });

  const sql = "INSERT INTO tables (number, status) VALUES (?, 'available')";
  db.run(sql, [number], function (err) {
    if (err) return res.status(500).json({ error: err.message });

    const tableId = this.lastID;
    const qrCodePath = path.join(qrCodeFolder, `table_${number}.png`);
    const qrData = `http://localhost:5000/?table=${number}`;

    // üìå ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà (512x512 px)
    QRCode.toFile(qrCodePath, qrData, { width: 512, margin: 2 }, (err) => {
      if (err) return res.status(500).json({ error: "QR Code generation failed" });

      res.json({ id: tableId, number, status: "available", qrCodeUrl: `http://localhost:5000/uploads/qr_codes/table_${number}.png` });
    });
  });
});

// üìå DELETE: ‡∏•‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡πÅ‡∏•‡∏∞ QR Code ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
router.delete("/:id", (req, res) => {
  const { id } = req.params;

  // üîπ ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  db.get("SELECT number FROM tables WHERE id = ?", [id], (err, row) => {
    if (err || !row) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ" });

    const tableNumber = row.number;
    const qrCodePath = path.join(qrCodeFolder, `table_${tableNumber}.png`);

    // üîπ ‡∏•‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    db.run("DELETE FROM tables WHERE id = ?", [id], (err) => {
      if (err) return res.status(500).json({ error: err.message });

      // üîπ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå QR Code ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
      if (fs.existsSync(qrCodePath)) fs.unlinkSync(qrCodePath);

      res.json({ success: true, message: `‡∏•‡∏ö‡πÇ‡∏ï‡πä‡∏∞ ${tableNumber} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß` });
    });
  });
});

module.exports = router;
